// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  password           String?
  verificationToken  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id       String  @id @default(cuid())
  username String  @unique
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  location String?
  bio      String?
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String?       @unique
  emailVerified DateTime?     @default(now())
  image         String?       @default("https://res.cloudinary.com/dlqzrhr6r/image/upload/v1648297324/profile/22-223968_default-profile-picture-circle-hd-png-download_xrlhqm.png")
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
  Content       Content[]
  Likes         Likes[]
  followers     Follow[]      @relation("follower")
  following     Follow[]      @relation("following")
  boughtfrom    Transaction[] @relation("buyer")
  soldTo        Transaction[] @relation("seller")
  MessagesSent  Message[]     @relation("sender")
  Room          Room[]
  View          View[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tags {
  id       String    @id @default(cuid())
  name     String    @unique()
  contents Content[]
}

model Content {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  description String
  title       String
  image       String
  tags        Tags[]
  createdBy   User          @relation(fields: [userId], references: [id])
  userId      String
  likes       Likes[]
  price       Int           @default(0)
  Transaction Transaction[]
  View        View[]
}

model Likes {
  id        String   @id @default(cuid())
  likedAt   DateTime @default(now())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id])
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, contentId])
}

model Follow {
  id          String   @id @default(cuid())
  followedAt  DateTime @default(now())
  followerId  String
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Transaction {
  id        String   @id @default(cuid())
  buyerId   String
  buyer     User     @relation("buyer", fields: [buyerId], references: [id])
  sellerId  String
  seller    User     @relation("seller", fields: [sellerId], references: [id])
  soldAt    DateTime @default(now())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id])
  amount    Int

  @@unique([contentId, buyerId])
}

model Message {
  id        String   @id @default(cuid())
  message   String   @db.LongText
  senderId  String
  sender    User     @relation("sender", fields: [senderId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  seen      Boolean  @default(false)
}

model Room {
  id        String    @id @default(cuid())
  members   User[]
  createdAt DateTime  @default(now())
  Message   Message[]
}

model View {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  contentId String
  count     Int      @default(1)
  userId    String
  content   Content  @relation(fields: [contentId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([contentId, userId])
}
