// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  password           String?
  verificationToken  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id       String  @id @default(cuid())
  username String  @unique
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  location String?
  bio      String?
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String?            @unique
  emailVerified    DateTime?          @default(now())
  image            String?            @default("https://res.cloudinary.com/dlqzrhr6r/image/upload/v1648297324/profile/22-223968_default-profile-picture-circle-hd-png-download_xrlhqm.png")
  accounts         Account[]
  sessions         Session[]
  Profile          Profile?
  Content          Content[]
  Likes            Likes[]
  followers        Follow[]           @relation("follower")
  following        Follow[]           @relation("following")
  boughtfrom       Transaction[]      @relation("buyer")
  soldTo           Transaction[]      @relation("seller")
  MessagesSent     Message[]          @relation("sender")
  Room             Room[]
  View             View[]
  MoneyTransaction MoneyTransaction[]
  employer         Jobs[]             @relation("employer")
  employee         Jobs[]             @relation("employee")
  Notification     Notification[]     @relation("user")
  notifiedBy       Notification[]     @relation("notifiedBy")
  availableForHire Boolean            @default(false)
  Ratings          Ratings[]
  // reports          Report[]           @relation("reportedBy")
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
}

model Tags {
  id       String    @id @default(cuid())
  name     String    @unique()
  contents Content[]
}

model Content {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  description String
  title       String
  image       String
  tags        Tags[]
  createdBy   User          @relation(fields: [userId], references: [id])
  userId      String
  likes       Likes[]
  price       Int           @default(0)
  Transaction Transaction[]
  View        View[]
  Boost       Boost?
  published   Boolean       @default(true)
  Jobs        Jobs?
  reports     Report[]      @relation("contentReported")
  deleted     Boolean       @default(false)
}

model Likes {
  id        String   @id @default(cuid())
  likedAt   DateTime @default(now())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
}

model Follow {
  id          String   @id @default(cuid())
  followedAt  DateTime @default(now())
  followerId  String
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Transaction {
  id        String   @id @default(cuid())
  buyerId   String
  buyer     User     @relation("buyer", fields: [buyerId], references: [id])
  sellerId  String
  seller    User     @relation("seller", fields: [sellerId], references: [id])
  soldAt    DateTime @default(now())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  amount    Int

  @@unique([contentId, buyerId])
}

model MoneyTransaction {
  id            String                 @id @default(cuid())
  type          MoneyTransactionType
  amount        Int
  userId        String
  User          User                   @relation(fields: [userId], references: [id])
  description   String
  transactionAt DateTime               @default(now())
  status        MoneyTransactionStatus @default(PENDING)
}

model Report {
  id              String       @id @default(cuid())
  // reporterId      String
  // reportedBy      User         @relation("reportedBy", fields: [reporterId], references: [id])
  contentId       String       @unique
  contentReported Content      @relation("contentReported", fields: [contentId], references: [id])
  description     String
  resolved        ReportStatus @default(PENDING)
  reportCount     Int          @default(0)
  reportedAt      DateTime     @default(now())

}

model Message {
  id        String   @id @default(cuid())
  message   String   @db.LongText
  senderId  String
  sender    User     @relation("sender", fields: [senderId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  seen      Boolean  @default(false)
}

model Room {
  id        String    @id @default(cuid())
  members   User[]
  createdAt DateTime  @default(now())
  Message   Message[]
}

model View {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  contentId String
  userId    String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])
}

model Boost {
  id        String   @id @default(cuid())
  boostedAt DateTime @default(now())
  contentId String   @unique
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Jobs {
  id               String     @id @default(cuid())
  title            String
  description      String
  price            Int
  image            String?
  status           JobsStatus @default(PENDING)
  dueIn            DateTime
  employerId       String
  employer         User       @relation("employer", fields: [employerId], references: [id])
  employeeId       String
  employee         User       @relation("employee", fields: [employeeId], references: [id])
  closedByEmployee Boolean    @default(false)
  closedByEmployer Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  content          Content?   @relation(fields: [contentId], references: [id])
  contentId        String?    @unique
  Ratings          Ratings[]
}

model Notification {
  id           String           @id @default(cuid())
  title        String
  type         NotificationType
  seen         Boolean          @default(false)
  userId       String
  User         User             @relation("user", fields: [userId], references: [id])
  createdAt    DateTime         @default(now())
  notifiedBy   User             @relation("notifiedBy", fields: [notifiedById], references: [id])
  notifiedById String
}

model Ratings {
  id     String @id @default(cuid())
  jobId  String
  Job    Jobs   @relation(fields: [jobsId], references: [id])
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobsId String
}

enum MoneyTransactionType {
  DEPOSIT
  WITHDRAW
}

enum NotificationType {
  JOB
  MESSAGE
  FOLLOW
  LIKE
  BOUGHT
}

enum MoneyTransactionStatus {
  PENDING
  SUCCESS
  CANCELED
}

enum JobsStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  CANCELED
  SUBMITTED
}

enum ReportStatus {
  PENDING
  REMOVED
  ALLOWED
}
